// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package tracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type biosnoopEvent struct {
	Comm     [16]uint8
	Delta    uint64
	Qdelta   uint64
	Ts       uint64
	Sector   uint64
	Len      uint32
	Pid      uint32
	CmdFlags uint32
	Dev      uint32
}

// loadBiosnoop returns the embedded CollectionSpec for biosnoop.
func loadBiosnoop() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BiosnoopBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load biosnoop: %w", err)
	}

	return spec, err
}

// loadBiosnoopObjects loads biosnoop and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*biosnoopObjects
//	*biosnoopPrograms
//	*biosnoopMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBiosnoopObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBiosnoop()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// biosnoopSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type biosnoopSpecs struct {
	biosnoopProgramSpecs
	biosnoopMapSpecs
}

// biosnoopSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type biosnoopProgramSpecs struct {
	BlkAccountIoMergeBio *ebpf.ProgramSpec `ebpf:"blk_account_io_merge_bio"`
	BlkAccountIoStart    *ebpf.ProgramSpec `ebpf:"blk_account_io_start"`
	BlockIoStart         *ebpf.ProgramSpec `ebpf:"block_io_start"`
	BlockRqComplete      *ebpf.ProgramSpec `ebpf:"block_rq_complete"`
	Z_blockRqInsert      *ebpf.ProgramSpec `ebpf:"z_block_rq_insert"`
	Z_blockRqIssue       *ebpf.ProgramSpec `ebpf:"z_block_rq_issue"`
}

// biosnoopMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type biosnoopMapSpecs struct {
	CgroupMap            *ebpf.MapSpec `ebpf:"cgroup_map"`
	Events               *ebpf.MapSpec `ebpf:"events"`
	GadgetMntnsFilterMap *ebpf.MapSpec `ebpf:"gadget_mntns_filter_map"`
	Infobyreq            *ebpf.MapSpec `ebpf:"infobyreq"`
	Start                *ebpf.MapSpec `ebpf:"start"`
}

// biosnoopObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBiosnoopObjects or ebpf.CollectionSpec.LoadAndAssign.
type biosnoopObjects struct {
	biosnoopPrograms
	biosnoopMaps
}

func (o *biosnoopObjects) Close() error {
	return _BiosnoopClose(
		&o.biosnoopPrograms,
		&o.biosnoopMaps,
	)
}

// biosnoopMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBiosnoopObjects or ebpf.CollectionSpec.LoadAndAssign.
type biosnoopMaps struct {
	CgroupMap            *ebpf.Map `ebpf:"cgroup_map"`
	Events               *ebpf.Map `ebpf:"events"`
	GadgetMntnsFilterMap *ebpf.Map `ebpf:"gadget_mntns_filter_map"`
	Infobyreq            *ebpf.Map `ebpf:"infobyreq"`
	Start                *ebpf.Map `ebpf:"start"`
}

func (m *biosnoopMaps) Close() error {
	return _BiosnoopClose(
		m.CgroupMap,
		m.Events,
		m.GadgetMntnsFilterMap,
		m.Infobyreq,
		m.Start,
	)
}

// biosnoopPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBiosnoopObjects or ebpf.CollectionSpec.LoadAndAssign.
type biosnoopPrograms struct {
	BlkAccountIoMergeBio *ebpf.Program `ebpf:"blk_account_io_merge_bio"`
	BlkAccountIoStart    *ebpf.Program `ebpf:"blk_account_io_start"`
	BlockIoStart         *ebpf.Program `ebpf:"block_io_start"`
	BlockRqComplete      *ebpf.Program `ebpf:"block_rq_complete"`
	Z_blockRqInsert      *ebpf.Program `ebpf:"z_block_rq_insert"`
	Z_blockRqIssue       *ebpf.Program `ebpf:"z_block_rq_issue"`
}

func (p *biosnoopPrograms) Close() error {
	return _BiosnoopClose(
		p.BlkAccountIoMergeBio,
		p.BlkAccountIoStart,
		p.BlockIoStart,
		p.BlockRqComplete,
		p.Z_blockRqInsert,
		p.Z_blockRqIssue,
	)
}

func _BiosnoopClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed biosnoop_bpfel_x86.o
var _BiosnoopBytes []byte
